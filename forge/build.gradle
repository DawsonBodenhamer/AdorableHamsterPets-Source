plugins {
    id 'com.gradleup.shadow'
}

architectury {
    platformSetupLoomIde()
    forge()
}

evaluationDependsOn ':common'

loom {
    forge {
        mixinConfig "adorablehamsterpets.mixins.json"
    }
    mods {
        main {
            sourceSet sourceSets.main
            sourceSet project(':common').sourceSets.main
        }
    }
}

sourceSets {
    main {
        resources {
            srcDir project(':fabric').file('src/main/generated')
            exclude(".cache/**")
        }
    }
}

// ---------- Datagen wiring ----------
// Make Forge’s resource processing wait for Fabric datagen
processResources {
    dependsOn(":fabric:runDatagen")      // simple string form avoids IDE “no candidates” warnings
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    exclude(".cache/**")                  // belt & suspenders
}

// And jars should also be cache-free/duplicate-tolerant
tasks.withType(Jar).configureEach {
    exclude(".cache/**")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
// ---------- End Datagen wiring ----------

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    forge "net.minecraftforge:forge:$rootProject.forge_version"
    modImplementation "dev.architectury:architectury-forge:$rootProject.architectury_api_version"

    // Forge Dependencies
    modImplementation "software.bernie.geckolib:geckolib-forge-$rootProject.minecraft_version:$rootProject.geckolib_version"
    modImplementation "curse.maven:jade-324717:${rootProject.jade_version_forge}"
    modImplementation "me.fzzyhmstrs:fzzy_config:${rootProject.fzzy_config_version}+forge"
    modRuntimeOnly "thedarkcolour:kotlinforforge:${rootProject.kff_version}"

    modCompileOnly "vazkii.patchouli:Patchouli:1.20.1-84.1-FORGE:api"
    modRuntimeOnly  "vazkii.patchouli:Patchouli:1.20.1-84.1-FORGE"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionForge')
}

processResources {
    dependsOn(":fabric:runDatagen")
    from(project(':fabric').file('src/main/generated')) {
        exclude('.cache/**')
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from project(":common").sourceSets.main.resources

    filesMatching(["META-INF/mods.toml", "*.mixins.json"]) {
        expand version: project.version
    }

    from sourceSets.main.resources

    inputs.property 'version', project.version
}

shadowJar {
    exclude "fabric.mod.json"
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    dependsOn(":fabric:runDatagen")
    exclude(".cache/**")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}