plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
    maven {
        url = "https://thedarkcolour.github.io/KotlinForForge/"
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"
    modImplementation "dev.architectury:architectury-neoforge:$rootProject.architectury_api_version"

    // Add our mod's dependencies for NeoForge
    modImplementation "software.bernie.geckolib:geckolib-neoforge-$rootProject.minecraft_version:$rootProject.geckolib_version"
    modImplementation "curse.maven:jade-324717:${rootProject.jade_version_neoforge}"

    // --- START: Dependency Conflict Resolution ---
    // 1. Implement Fzzy Config but EXCLUDE its transitive dependency on kotlinforforge.
    //    This prevents Gradle from pulling in a version we don't control.
    modImplementation("me.fzzyhmstrs:fzzy_config:${rootProject.fzzy_config_version}+neoforge") {
        exclude group: 'thedarkcolour', module: 'kotlinforforge'
    }

    // 2. Now, explicitly declare the EXACT version of Kotlin for Forge we need.
    //    The logs indicated Fzzy Config uses 5.4.0. We use 'modRuntimeOnly' as it's a language provider.
    modRuntimeOnly "thedarkcolour:kotlinforforge-neoforge:5.4.0"
    // --- END: Dependency Conflict Resolution ---


    // Standard Architectury setup to include the common project
    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/neoforge.mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
    exclude "fabric.mod.json"
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}