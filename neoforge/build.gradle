plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

loom {
 // Configure source sets
    mods {
        main {
            sourceSet sourceSets.main
            // Include resources generated by the common module
            sourceSet project(':common').sourceSets.main
            // Include resources generated by the fabric module
            sourceSet project(':fabric').sourceSets.main
        }
    }
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
    maven {
        url = "https://thedarkcolour.github.io/KotlinForForge/"
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"
    modImplementation "dev.architectury:architectury-neoforge:$rootProject.architectury_api_version"

    modImplementation "software.bernie.geckolib:geckolib-neoforge-$rootProject.minecraft_version:$rootProject.geckolib_version"
    modImplementation "curse.maven:jade-324717:${rootProject.jade_version_neoforge}"

    modRuntimeOnly "me.fzzyhmstrs:fzzy_config:${rootProject.fzzy_config_version}+neoforge"
    modRuntimeOnly "maven.modrinth:kotlin-for-forge:${rootProject.kff_version}"


    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }
}

processResources {
    inputs.property 'version', project.version

    filesMatching(["META-INF/neoforge.mods.toml", "*.mixins.json"]) {
        expand version: project.version
    }
}

shadowJar {
    // Add both excludes
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    // Use shadowBundle to match the dependency block
    configurations = [project.configurations.shadowBundle]
    from(sourceSets.main.output)
    from(project(':fabric').sourceSets.main.output)
    archiveClassifier = "dev-shadow"
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}