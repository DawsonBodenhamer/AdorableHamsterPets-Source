plugins {
    id 'com.gradleup.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

fabricApi {
    configureDataGeneration {
        client = true
    }
}

evaluationDependsOn ':common'

loom {
    mods {
        main {
            sourceSet sourceSets.main
            sourceSet project(':common').sourceSets.main
        }
    }
}

sourceSets {
    main {
        resources {
            // include BOTH assets and data produced by datagen
            srcDir file('src/main/generated')
            exclude('.cache/**')
        }
    }
}

// ---------- Datagen wiring ----------
// Paths that Fabric datagen writes to
def genRoot = file("$projectDir/src/main/generated")
def genRes  = file("$projectDir/src/main/generated/resources")

// Tell Gradle what runDatagen produces (so other tasks can depend on it)
tasks.named("runDatagen") {
    outputs.dir(genRoot)
    outputs.dir(genRes)
    mustRunAfter("clean")
}

// Artifacts that read those files must wait for datagen
jar {
    dependsOn("runDatagen")
}
sourcesJar {
    dependsOn("runDatagen")
}

// Be tolerant to accidental duplicate paths and never package the cache
tasks.withType(Jar).configureEach {
    exclude(".cache/**")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.named("jar") {
    dependsOn("runDatagen")
    inputs.dir(file('src/main/generated'))
}

tasks.named("sourcesJar") {
    dependsOn("runDatagen")
    inputs.dir(file('src/main/generated'))
}
// ---------- End Datagen wiring ----------

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modImplementation("net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}") { version { strictly rootProject.fabric_api_version } }
    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"

    // Fabric Dependencies
    modImplementation "software.bernie.geckolib:geckolib-fabric-$rootProject.minecraft_version:$rootProject.geckolib_version"
    modImplementation "com.terraformersmc:modmenu:${rootProject.modmenu_version}"
    modImplementation "curse.maven:jade-324717:${rootProject.jade_version_fabric}"
    modImplementation "me.fzzyhmstrs:fzzy_config:${rootProject.fzzy_config_version}"
    modRuntimeOnly "maven.modrinth:fabric-language-kotlin:${rootProject.flk_version}"
    modImplementation include("maven.modrinth:placeholder-api:2.1.1+1.20")
    modImplementation "vazkii.patchouli:Patchouli:1.20.1-84.1-FABRIC"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}

processResources {
    from(file('src/main/generated')) {
        exclude('.cache/**')
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from project(":common").sourceSets.main.resources
    from sourceSets.main.resources

    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'

    // include compiled classes + normal resources
    from sourceSets.main.output

    // include generated assets & data directly, but skip cache
    from('src/main/generated') {
        exclude('.cache/**')
    }

    // make sure the files exist before we package
    dependsOn('runDatagen')
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}