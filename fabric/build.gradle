plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}
evaluationDependsOn ':common'

architectury {
    platformSetupLoomIde()
    fabric()
}

fabricApi {
    configureDataGeneration {
        client = true
    }
}

loom {
    mods {
        main {
            sourceSet sourceSets.main
            sourceSet project(':common').sourceSets.main
        }
    }
}

sourceSets {
    main {
        resources {
            srcDir file('src/main/generated')
            exclude('.cache/**')
        }
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"

    // GeckoLib
    modImplementation "software.bernie.geckolib:geckolib-fabric-$rootProject.minecraft_version:$rootProject.geckolib_version"

    // Mod Menu
    modImplementation "com.terraformersmc:modmenu:${rootProject.modmenu_version}"

    // Jade
    modImplementation "curse.maven:jade-324717:${rootProject.jade_version_fabric}"

    // Fzzy Config and its runtime dependencies
    modImplementation "me.fzzyhmstrs:fzzy_config:${rootProject.fzzy_config_version}"
    modRuntimeOnly "maven.modrinth:fabric-language-kotlin:${rootProject.flk_version}"

    // Placeholder API (for bundling)
    modImplementation include("maven.modrinth:placeholder-api:2.4.2+1.21")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.named("runDatagen") {
    outputs.dir(file('src/main/generated'))
    mustRunAfter("clean")
}

shadowJar {
    dependsOn(tasks.named("runDatagen"))

    exclude "architectury.common.json"
    configurations = [project.configurations.shadowCommon]
    from(sourceSets.main.output)
    archiveClassifier = "dev-shadow"
    dependsOn project(':common').tasks.named('transformProductionFabric')

    dependsOn(tasks.named("runDatagen"))
    from(file('src/main/generated'))
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }

    dependsOn(tasks.named("runDatagen"))
    from(file('src/main/generated'))
}

tasks.withType(Jar).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    exclude(".cache/**")
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}